/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package buildSrc

import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.Task
import org.gradle.api.execution.TaskExecutionListener
import org.gradle.api.logging.StandardOutputListener
import org.gradle.api.tasks.TaskState
import org.slf4j.LoggerFactory

/**
 * A simple 'hello world' plugin.
 * 插件项目目录 resources 目录下建立 <plugin_name>.properties 文件其中内置:implementation-class=<package.classname>属性用于指向
 * 插件的实现类
 */
class BuildSrcPlugin: Plugin<Project> {
    var logger = LoggerFactory.getLogger("BuildSrcPlugin")

    override fun apply(project: Project) {
        // Register a task
        project.tasks.register("greeting") { task ->
            task.doLast {
                println("Hello from plugin 'buildSrc.greeting'")
            }
            task.doFirst{
                logger.error("greeting task use slf4j")
            }
        }

        project.gradle.useLogger(TaskExecutionLogger())
        project.gradle.useLogger(StandardOutput())
    }
}

// 生命周期的日志已经被解析
 class TaskExecutionLogger: TaskExecutionListener{
     override fun beforeExecute(task: Task) {
         println("[${task.name}] Task Type: ${task::class.java.simpleName}")
     }

     override fun afterExecute(task: Task, state: TaskState) {
         println("after Exe: ${task.state}")
     }
 }

//TODO://标准输入输出的日志没有被获取
class StandardOutput: StandardOutputListener{
    override fun onOutput(output: CharSequence?) {
        println("append by standardOutPut: $output")
    }

}
