/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.hunter524.forlove

import java.io.File
import java.net.URLDecoder

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}
fun main(args: Array<String>) {
    println(App().greeting)
    println("Thread is Daemon :${Thread.currentThread().isDaemon}")
//    testCWD()
    testCodePoint()
}

// 通过相对路径构建 File
// CWD(current working directory ) 当前工作目录则为当前执行 java 命令运行 jar 包的目录
// 构建的相对路径的 File 则是相对 CWD 的文件
fun testCWD() {
    val file = File("src")
    println("File AbsolutePath: ${file.absolutePath}")
}

fun testDaemonThread() {
    var thread = Thread {
        while (true) {
            runCatching {
                Thread.sleep(1000)
            }
        }
    }
//    thread.isDaemon = true
    thread.isDaemon = false
    thread.start()
}

fun testCodePoint() {
    var s = "严"
    var codePointAt = s.codePointAt(0)
    println("严 codePoint: ${Integer.toHexString(codePointAt)}")
//    String#getChars 获得即为 Unicode 字符集该字对应的编码
    s.chars().forEach {
        println("${Integer.toBinaryString(it)}\n")
    }
//    String#getBytes 对应的即为指定编码之后的byte流
    var byteArray = s.toByteArray()
    byteArray.forEach {
        var binaryString = Integer.toBinaryString(it.toInt())
        println(binaryString.substring(24))
    }
}
